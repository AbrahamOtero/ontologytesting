/*
 * AddSPARQLJPanel.java
 *
 * Created on 19 de mayo de 2008, 19:12
 */

package ontologytestgui;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFNode;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import model.ClassInstances;
import model.CollectionTest;
import model.PropertyInstances;
import model.ScenarioTest;
import model.SparqlQueryOntology;
import org.mindswap.pellet.exceptions.UnsupportedFeatureException;
import org.mindswap.pellet.jena.NodeFormatter;
import org.mindswap.pellet.jena.PelletQueryExecution;
import org.mindswap.pellet.jena.PelletReasonerFactory;
import org.mindswap.pellet.output.TableData;

/**
 *
 * @author  Saruskas
 */
public class AddSPARQLJPanel extends javax.swing.JPanel {

    private OntModel model;
    static final int desktopWidth = 700;
    static final int desktopHeight = 600;
    static JFrame frame;
    public static boolean isSeleccionado() {
        return seleccionado;
    }
    public static void setSeleccionado(boolean aSeleccionado) {
        seleccionado = aSeleccionado;
    }
    public static boolean seleccionado;
    public static ScenarioTest scenarioTestQuery;
    private ArrayList<SparqlQueryOntology> listSparqlQuerys;
    
    /** Creates new form AddSPARQLJPanel */
    public AddSPARQLJPanel() {
        initComponents();
        listSparqlQuerys = new ArrayList<SparqlQueryOntology>();
        scenarioTestQuery = new ScenarioTest();
        ArrayList<ScenarioTest> scenarioT = MainJPanel.getCollectionTest().getScenariotest();
        scenarioT.add(scenarioTestQuery);
        MainJPanel.getCollectionTest().setScenariotest(scenarioT);
        
        instancesPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        instancesPanel.add(new AddInstancesJPanel());
        setSeleccionado(true);
        GroupTestsJPanel.setState(false);
        GroupTestsJPanel.setNewState(false);
 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nuevaConsultaButton = new javax.swing.JButton();
        limpiarButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        testNameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        testDescTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        añadirConsultaButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sparqlTextArea = new javax.swing.JTextArea();
        instancesPanel = new javax.swing.JPanel();

        jLabel1.setText("Introduzca la consulta en SPARQL:");

        nuevaConsultaButton.setText("Nueva Consulta");
        nuevaConsultaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaConsultaButtonActionPerformed(evt);
            }
        });

        limpiarButton.setText("Limpiar");
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Introduzca el nombre del test:");

        jLabel3.setText("Añada una descripción para el test:");

        testDescTextArea.setColumns(20);
        testDescTextArea.setRows(5);
        jScrollPane2.setViewportView(testDescTextArea);

        jLabel4.setText("Introduzca el resultado que espera obtener para dicha consulta:");

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane3.setViewportView(resultTextArea);

        añadirConsultaButton.setText("Añadir existente");
        añadirConsultaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirConsultaButtonActionPerformed(evt);
            }
        });

        sparqlTextArea.setColumns(20);
        sparqlTextArea.setRows(5);
        jScrollPane1.setViewportView(sparqlTextArea);

        org.jdesktop.layout.GroupLayout instancesPanelLayout = new org.jdesktop.layout.GroupLayout(instancesPanel);
        instancesPanel.setLayout(instancesPanelLayout);
        instancesPanelLayout.setHorizontalGroup(
            instancesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 523, Short.MAX_VALUE)
        );
        instancesPanelLayout.setVerticalGroup(
            instancesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 153, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 251, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                                    .add(layout.createSequentialGroup()
                                        .add(limpiarButton)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(nuevaConsultaButton)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(añadirConsultaButton))
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 503, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel4)
                                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 388, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 224, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 495, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(testNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 267, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(instancesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(11, 11, 11)
                .add(testNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(limpiarButton)
                    .add(añadirConsultaButton)
                    .add(nuevaConsultaButton))
                .add(8, 8, 8)
                .add(instancesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void nuevaConsultaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaConsultaButtonActionPerformed
// TODO add your handling code here:
    SparqlQueryOntology query = new SparqlQueryOntology();
    if(!this.getSPARQLQuery().equals("") && !this.getResultTextArea().equals("")){
        query.setQuerySparql(this.getSPARQLQuery());
        query.setResultexpected(this.getResultTextArea());
        listSparqlQuerys.add(query);
        this.setResultTextArea("");
        this.setSPARQLQuery("");
    }else if(this.getSPARQLQuery().equals("") || this.getResultTextArea().equals("")){
        JOptionPane.showMessageDialog(frame,"Ambos campos CONSULTA y RESULTADO ESPERADO " +
                "son obligatorios.", "Warning Message",JOptionPane.WARNING_MESSAGE);
    }
}//GEN-LAST:event_nuevaConsultaButtonActionPerformed

private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
// TODO add your handling code here:
    this.setSPARQLQuery("");
    this.setResultTextArea("");
    CollectionTest t = MainJPanel.getCollectionTest();
}//GEN-LAST:event_limpiarButtonActionPerformed

private void añadirConsultaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirConsultaButtonActionPerformed
// TODO add your handling code here:
    
}//GEN-LAST:event_añadirConsultaButtonActionPerformed

 public void run(String queryStr, boolean formatHTML) throws Exception {
        
        Query query = QueryFactory.create(queryStr);
        if (!query.isSelectType()) {
        	throw new UnsupportedFeatureException("Only SELECT supported for this example");
        }
        // create an empty ontology model using Pellet spec
        model = ModelFactory.createOntologyModel( PelletReasonerFactory.THE_SPEC );        
        model.setStrictMode(false);
       
        if(query.getGraphURIs().size()==0)
            throw new UnsupportedFeatureException("SPARQL query must have a FROM clause for this example");
        for (Iterator iter = query.getGraphURIs().iterator(); iter.hasNext();) {
        	String sourceURI = (String) iter.next();
        	model.read( sourceURI );
        }
        
	QueryExecution qexec = new PelletQueryExecution(query, model);
        ResultSet results = qexec.execSelect();
        // create a node formatter
        NodeFormatter formatter = new NodeFormatter(model, formatHTML); 
        // variables used in select
        List resultVars = query.getResultVars();
        
        // store the formatted results an a table 
        TableData table = new TableData( resultVars );
        while( results.hasNext() ) {
            QuerySolution binding = results.nextSolution();
            List formattedBinding = new ArrayList();
            for(int i = 0; i < resultVars.size(); i++) {
                String var = (String) resultVars.get(i);
                RDFNode result = binding.get(var);
                                
                formattedBinding.add(formatter.format(result));                
            }
            table.add(formattedBinding);
        }
        table.print(System.out, formatHTML);
    }
    
    private static void createAndShowGUI() {
        //JFrame.setDefaultLookAndFeelDecorated(true);
        //Create and set up the window.
        frame = new JFrame("Test de Prueba");
        frame.getContentPane().add(new AddSPARQLJPanel()); 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                createAndShowGUI();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton añadirConsultaButton;
    private javax.swing.JPanel instancesPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarButton;
    private javax.swing.JButton nuevaConsultaButton;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JTextArea sparqlTextArea;
    private javax.swing.JTextArea testDescTextArea;
    private javax.swing.JTextField testNameTextField;
    // End of variables declaration//GEN-END:variables

    public void setSPARQLQuery(String sparql){
        sparqlTextArea.setText(sparql);
    }
    
    public String getSPARQLQuery(){
        return sparqlTextArea.getText();
    }

    public String getResultTextArea() {
        return resultTextArea.getText();
    }

    public void setResultTextArea(String resultTextArea) {
        this.resultTextArea.setText(resultTextArea);
    }

    public String getTestDescTextArea() {
        return testDescTextArea.getText();
    }

    public void setTestDescTextArea(String testDescTextArea) {
        this.testDescTextArea.setText(testDescTextArea);
    }

    public String getTestNameTextField() {
        return testNameTextField.getText();
    }

    public void setTestNameTextField(String testNameTextField) {
        this.testNameTextField.setText(testNameTextField);
    }

    public static ScenarioTest getScenarioTestQuery() {
        return scenarioTestQuery;
    }

    public static void setScenarioTestQuery(ScenarioTest ascenarioTestQuery) {
       scenarioTestQuery = ascenarioTestQuery;
    }
}
