/*
 * MainApplication.java
 *
 * Created on 11 de septiembre de 2008, 16:32
 */

package code.google.com.p.ontologytesting.guiNew;

import code.google.com.p.ontologytesting.model.*;
import code.google.com.p.ontologytesting.model.jenainterfaz.ExceptionReadOntology;
import code.google.com.p.ontologytesting.persistence.SaveTest;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.XMLDecoder;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

/**
 *
 * @author  saruskas
 */
public class MainApplication extends javax.swing.JFrame {

    private static CollectionTest collection;
    private JFileChooser filechooser;
    private static String proyecto,nombreProyecto;
    private AddInstancesClasPropJDialog addInst;
    private OntologyTestCase testcase;
    private ResultTests resultTests;
    private OntologyTestResult testresult;
    private SaveTest saveTest;
    private HelpJDialog helpDialog;
    private XMLDecoder decoder;
    private JFrame frame;
    private ScenarioTest scenario;
    private AddSPARQLJPanel testSparql;
    private Instancias instancias;
    private SeeTestJDialog seeTest;
    private ListAndTestsJPanel listTest;
    private ListAndResultsJPanel panelTest;
    

    /** Creates new form MainApplication */
    public MainApplication() {
        initComponents();
        this.setTitle("EVALUADOR DE ONTOLOGIAS");
        this.setSize(new Dimension(895,720));
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        contentTestsJPanel.setLayout(new BorderLayout());
        collection = new CollectionTest();
        panelTest = new ListAndResultsJPanel();
        //"http://www.owl-ontologies.com/family.owl#"
        //http://nlp.shef.ac.uk/abraxas/ontologies/animals.owl
        //http://www.semanticweb.org/ontologies/2008/1/Ontology1202481514781.owl
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentTestsJPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        proyectoMenu = new javax.swing.JMenu();
        nuevoProyecto = new javax.swing.JMenuItem();
        abrirProyecto = new javax.swing.JMenuItem();
        guardarProyecto = new javax.swing.JMenuItem();
        guardarProyectoComo = new javax.swing.JMenuItem();
        salirProyecto = new javax.swing.JMenuItem();
        testsSimplesMenu = new javax.swing.JMenu();
        nuevoTestSimple = new javax.swing.JMenu();
        nuevoTestInst = new javax.swing.JMenuItem();
        nuevoTestRec = new javax.swing.JMenuItem();
        nuevoTestReal = new javax.swing.JMenuItem();
        nuevoTestSat = new javax.swing.JMenuItem();
        nuevoTestCla = new javax.swing.JMenuItem();
        importarTestSimple = new javax.swing.JMenuItem();
        editarTestSimple = new javax.swing.JMenuItem();
        explorarTestSimple = new javax.swing.JMenuItem();
        verTestSimpleMenuItem = new javax.swing.JMenuItem();
        testsSparqlMenu = new javax.swing.JMenu();
        nuevoTestSparql = new javax.swing.JMenuItem();
        importarTestSparql = new javax.swing.JMenuItem();
        editarTestSparql = new javax.swing.JMenuItem();
        explorarTestSparql = new javax.swing.JMenuItem();
        verTestSparql = new javax.swing.JMenuItem();
        instanciasMenu = new javax.swing.JMenu();
        nuevoInstancias = new javax.swing.JMenuItem();
        importarInstancias = new javax.swing.JMenuItem();
        editarInstancias = new javax.swing.JMenuItem();
        explorarInstancias = new javax.swing.JMenuItem();
        verInstancias = new javax.swing.JMenuItem();
        ejecutarMenu = new javax.swing.JMenu();
        ejectuarTests = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        tiposDeTestsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout contentTestsJPanelLayout = new javax.swing.GroupLayout(contentTestsJPanel);
        contentTestsJPanel.setLayout(contentTestsJPanelLayout);
        contentTestsJPanelLayout.setHorizontalGroup(
            contentTestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        contentTestsJPanelLayout.setVerticalGroup(
            contentTestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
        );

        proyectoMenu.setText("Proyecto");

        nuevoProyecto.setText("Nuevo");
        nuevoProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoProyectoActionPerformed(evt);
            }
        });
        proyectoMenu.add(nuevoProyecto);

        abrirProyecto.setText("Abrir");
        abrirProyecto.setEnabled(false);
        abrirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirProyectoActionPerformed(evt);
            }
        });
        proyectoMenu.add(abrirProyecto);

        guardarProyecto.setText("Guardar");
        guardarProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarProyectoActionPerformed(evt);
            }
        });
        proyectoMenu.add(guardarProyecto);

        guardarProyectoComo.setText("Guardar como");
        guardarProyectoComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarProyectoComoActionPerformed(evt);
            }
        });
        proyectoMenu.add(guardarProyectoComo);

        salirProyecto.setText("Salir");
        salirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirProyectoActionPerformed(evt);
            }
        });
        proyectoMenu.add(salirProyecto);

        menuBar.add(proyectoMenu);

        testsSimplesMenu.setText("Tests Simples");

        nuevoTestSimple.setText("Nuevo");

        nuevoTestInst.setText("Test de Instanciaci贸n");
        nuevoTestInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestInstActionPerformed(evt);
            }
        });
        nuevoTestSimple.add(nuevoTestInst);

        nuevoTestRec.setText("Test de Recuperaci贸n");
        nuevoTestRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestRecActionPerformed(evt);
            }
        });
        nuevoTestSimple.add(nuevoTestRec);

        nuevoTestReal.setText("Test de Realizaci贸n");
        nuevoTestReal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestRealActionPerformed(evt);
            }
        });
        nuevoTestSimple.add(nuevoTestReal);

        nuevoTestSat.setText("Test de Satisfactibilidad");
        nuevoTestSat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestSatActionPerformed(evt);
            }
        });
        nuevoTestSimple.add(nuevoTestSat);

        nuevoTestCla.setText("Test de Clasificaci贸n");
        nuevoTestCla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestClaActionPerformed(evt);
            }
        });
        nuevoTestSimple.add(nuevoTestCla);

        testsSimplesMenu.add(nuevoTestSimple);

        importarTestSimple.setText("Importar");
        importarTestSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarTestSimpleActionPerformed(evt);
            }
        });
        testsSimplesMenu.add(importarTestSimple);

        editarTestSimple.setText("Editar");
        editarTestSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarTestSimpleActionPerformed(evt);
            }
        });
        testsSimplesMenu.add(editarTestSimple);

        explorarTestSimple.setText("Explorar");
        explorarTestSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explorarTestSimpleActionPerformed(evt);
            }
        });
        testsSimplesMenu.add(explorarTestSimple);

        verTestSimpleMenuItem.setText("Ver");
        verTestSimpleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verTestSimpleMenuItemActionPerformed(evt);
            }
        });
        testsSimplesMenu.add(verTestSimpleMenuItem);

        menuBar.add(testsSimplesMenu);

        testsSparqlMenu.setText("Tests SPARQL");

        nuevoTestSparql.setText("Nuevo");
        nuevoTestSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestSparqlActionPerformed(evt);
            }
        });
        testsSparqlMenu.add(nuevoTestSparql);

        importarTestSparql.setText("Importar");
        importarTestSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarTestSparqlActionPerformed(evt);
            }
        });
        testsSparqlMenu.add(importarTestSparql);

        editarTestSparql.setText("Editar");
        editarTestSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarTestSparqlActionPerformed(evt);
            }
        });
        testsSparqlMenu.add(editarTestSparql);

        explorarTestSparql.setText("Explorar");
        explorarTestSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explorarTestSparqlActionPerformed(evt);
            }
        });
        testsSparqlMenu.add(explorarTestSparql);

        verTestSparql.setText("Ver");
        verTestSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verTestSparqlActionPerformed(evt);
            }
        });
        testsSparqlMenu.add(verTestSparql);

        menuBar.add(testsSparqlMenu);

        instanciasMenu.setText("Instancias");

        nuevoInstancias.setText("Nuevo");
        nuevoInstancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoInstanciasActionPerformed(evt);
            }
        });
        instanciasMenu.add(nuevoInstancias);

        importarInstancias.setText("Importar");
        importarInstancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarInstanciasActionPerformed(evt);
            }
        });
        instanciasMenu.add(importarInstancias);

        editarInstancias.setText("Editar");
        editarInstancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarInstanciasActionPerformed(evt);
            }
        });
        instanciasMenu.add(editarInstancias);

        explorarInstancias.setText("Explorar");
        explorarInstancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explorarInstanciasActionPerformed(evt);
            }
        });
        instanciasMenu.add(explorarInstancias);

        verInstancias.setText("Ver");
        verInstancias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verInstanciasActionPerformed(evt);
            }
        });
        instanciasMenu.add(verInstancias);

        menuBar.add(instanciasMenu);

        ejecutarMenu.setText("Ejecutar");
        ejecutarMenu.setEnabled(false);

        ejectuarTests.setText("Todos los Test");
        ejectuarTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejectuarTestsActionPerformed(evt);
            }
        });
        ejecutarMenu.add(ejectuarTests);

        menuBar.add(ejecutarMenu);

        helpMenu.setText("Help");

        tiposDeTestsMenuItem.setText("Tipos de Test");
        tiposDeTestsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiposDeTestsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(tiposDeTestsMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.setEnabled(false);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentTestsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentTestsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirProyectoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        int n = JOptionPane.showConfirmDialog(this, "驴Desea abandonar la aplicaci贸n?", 
                "Salir",JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION){
            System.exit(0);
        }
}

private void nuevoProyectoActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    NewProjectJDialog newProject = new NewProjectJDialog(this,true);
    newProject.setLocationRelativeTo(this);
    newProject.setVisible(true);
    if(newProject.getProyectoCreado()==true){
        this.inicializarContadores();
        this.getInstanciasMenu().setEnabled(true);
        this.getTestsSimplesMenu().setEnabled(true);
        this.getTestsSparqlMenu().setEnabled(true);
        this.getEjecutarMenu().setEnabled(true);
        collection = new CollectionTest();
        contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
        this.validate();
    }
}

private void nuevoTestInstActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    this.inicializarContadores();
    if(ControladorTests.algunTestSinGuardar()==false){
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        ControladorTests.setTestInstGuardado(false);
        ControladorTests.setTestInstSelect(true);
        this.aniadirTestsInst();
    }else{
        int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
                "Guardar Tests",JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION){
                    ControladorTests.inicializarGuardados();
                    ControladorTests.inicializarSeleccionados();
                    ControladorTests.setTestInstGuardado(false);
                    ControladorTests.setTestInstSelect(true);
                    this.aniadirTestsInst();
            }else{
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestInstGuardado(false);
                ControladorTests.setTestInstSelect(true);
                this.aniadirTestsInst();
            }
    }
}

private void importarTestSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarTestSimpleActionPerformed
// TODO add your handling code here:        
    try{
        if(this.importarTest()){
            JOptionPane.showMessageDialog(this,"El test se ha importado correctamente",
            "Information Message",JOptionPane.INFORMATION_MESSAGE);
        }
    }catch(FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"No se ha importado el test",//GEN-LAST:event_importarTestSimpleActionPerformed
            "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    }
}                                                  

private void editarTestSimpleActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    this.inicializarContadores();
    try {
        this.editarTests();
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se puede abrir el test para su edici贸n",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    } 
}                                                

private void importarTestSparqlActionPerformed(java.awt.event.ActionEvent evt) {                                                   
// TODO add your handling code here:
    try{
        if(this.importarTest()){
            JOptionPane.showMessageDialog(this,"El test se ha importado correctamente",
            "Information Message",JOptionPane.INFORMATION_MESSAGE);
        }
    }catch(FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"No se ha importado el test",                                                  
            "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
            JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
            "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    }
}

private void nuevoInstanciasActionPerformed(java.awt.event.ActionEvent evt) {                                                
// TODO add your handling code here:
    this.inicializarContadores();
    int sel = ControladorTests.testSeleccionado();
    addInst = new AddInstancesClasPropJDialog(this,true,sel);
    addInst.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    addInst.setVisible(true);
}

private void importarInstanciasActionPerformed(java.awt.event.ActionEvent evt) {                                                   
// TODO add your handling code here:
    this.importarInstancias();
}

private void editarInstanciasActionPerformed(java.awt.event.ActionEvent evt) {                                                 
// TODO add your handling code here:
    this.inicializarContadores();
    this.editarInstancias();
}

private void explorarInstanciasActionPerformed(java.awt.event.ActionEvent evt) {                                                   
// TODO add your handling code here:
    try{
        this.explorarInstancias();
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se pudo abrir el archivo",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    }
}

private void nuevoTestRecActionPerformed(java.awt.event.ActionEvent evt) {                                             
// TODO add your handling code here:
    this.inicializarContadores();
    if(ControladorTests.algunTestSinGuardar()==false){
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        ControladorTests.setTestRetGuardado(false);
        ControladorTests.setTestRetSelect(true);
        this.aniadirTestsRet();
    }else{
        int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
                "Guardar Tests",JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION){
                    ControladorTests.inicializarGuardados();
                    ControladorTests.inicializarSeleccionados();
                    ControladorTests.setTestRetGuardado(false);
                    ControladorTests.setTestRetSelect(true);
                    this.aniadirTestsRet();
            }else{
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestRetGuardado(false);
                ControladorTests.setTestRetSelect(true);
                this.aniadirTestsRet();
            }
    }
}

private void nuevoTestRealActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    this.inicializarContadores();
    if(ControladorTests.algunTestSinGuardar()==false || getContentTestsJPanel().getComponentCount()==0){
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        ControladorTests.setTestRealGuardado(false);
        ControladorTests.setTestRealSelect(true);
        this.aniadirTestsReal();
    }else{
        int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
                "Guardar Tests",JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION){
                    ControladorTests.inicializarGuardados();
                    ControladorTests.inicializarSeleccionados();
                    ControladorTests.setTestRealGuardado(false);
                    ControladorTests.setTestRealSelect(true);
                    this.aniadirTestsReal();
            }else{
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestRealGuardado(false);
                ControladorTests.setTestRealSelect(true);
                this.aniadirTestsReal();
            }
    }
}

private void nuevoTestSatActionPerformed(java.awt.event.ActionEvent evt) {                                             
// TODO add your handling code here:
    this.inicializarContadores();
    if(ControladorTests.algunTestSinGuardar()==false || getContentTestsJPanel().getComponentCount()==0){
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        ControladorTests.setTestSatGuardado(false);
        ControladorTests.setTestSatSelect(true);
        this.aniadirTestsSat();
    }else{
        int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
                "Guardar Tests",JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION){
                    ControladorTests.inicializarGuardados();
                    ControladorTests.inicializarSeleccionados();
                    ControladorTests.setTestSatGuardado(false);
                    ControladorTests.setTestSatSelect(true);
                    this.aniadirTestsSat();
            }else{
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestSatGuardado(false);
                ControladorTests.setTestSatSelect(true);
                this.aniadirTestsSat();
            }
    }
}

private void nuevoTestClaActionPerformed(java.awt.event.ActionEvent evt) {                                             
// TODO add your handling code here:
    this.inicializarContadores();
    if(ControladorTests.algunTestSinGuardar()==false || getContentTestsJPanel().getComponentCount()==0){
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        ControladorTests.setTestClasGuardado(false);
        ControladorTests.setTestClasSelect(true);
        this.aniadirTestsClas();
    }else{
        int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
                "Guardar Tests",JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION){
                    ControladorTests.inicializarGuardados();
                    ControladorTests.inicializarSeleccionados();
                    ControladorTests.setTestClasGuardado(false);
                    ControladorTests.setTestClasSelect(true);
                    this.aniadirTestsClas();
            }else{
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestClasGuardado(false);
                ControladorTests.setTestClasSelect(true);
                this.aniadirTestsClas();
            }
    }
}

private void ejectuarTestsActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    if(MainApplication.getCollection().getScenariotest().size()==0){
        JOptionPane.showMessageDialog(this,"No tiene ningun test para ejecutar",
        "Warning Message",JOptionPane.WARNING_MESSAGE);
    }else{
	    testcase = new OntologyTestCase();
            resultTests = new ResultTests();
            testresult = new OntologyTestResult();
            try {
                testcase.run(testresult, MainApplication.getCollection());
                JPanel panel = new TreeResults(testresult);
                resultTests.getContentPanelResults().add(panel);
                resultTests.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
                resultTests.setVisible(true);
                resultTests.validate();
            }catch (ExceptionReadOntology ex) {
                new ExceptionReadOntology("La ontologia introducida no es valida." +
                "\nSolo pueden realizarse tests sobre documentos owl consistentes");
            }
    }
}
    
private void explorarTestSimpleActionPerformed(java.awt.event.ActionEvent evt) {                                                   
// TODO add your handling code here:
    try{
        this.explorarTests();
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se pudo abrir el archivo",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    }
}
  

private void nuevoTestSparqlActionPerformed(java.awt.event.ActionEvent evt) {                                                
// TODO add your handling code here:
if(ControladorTests.algunTestSinGuardar()==false || getContentTestsJPanel().getComponentCount()==0){
    ControladorTests.inicializarGuardados();
    ControladorTests.inicializarSeleccionados();
    ControladorTests.setTestSparqlGuardado(false);
    ControladorTests.setTestSparqlSelect(true);
    this.aniadirTestsSparql();
}else{
    int n = JOptionPane.showConfirmDialog(this, "驴Guardar los cambios realizados al test?", 
            "Guardar Tests",JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION){
                ControladorTests.inicializarGuardados();
                ControladorTests.inicializarSeleccionados();
                ControladorTests.setTestClasGuardado(false);
                ControladorTests.setTestClasSelect(true);
                this.aniadirTestsSparql();
        }else{
            ControladorTests.inicializarGuardados();
            ControladorTests.inicializarSeleccionados();
            ControladorTests.setTestClasGuardado(false);
            ControladorTests.setTestClasSelect(true);
            this.aniadirTestsSparql();
        }
}
}

private void editarTestSparqlActionPerformed(java.awt.event.ActionEvent evt) {                                                 
// TODO add your handling code here:
    try {
        this.editarTests();
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se puede abrir el test para su edici贸n",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    } 
}

private void guardarProyectoActionPerformed(java.awt.event.ActionEvent evt) {                                                
// TODO add your handling code here:
    saveTest = new SaveTest();
    try {
        saveTest.saveProject();
        JOptionPane.showMessageDialog(this,"El proyecto se ha guardado",
        "Information Message",JOptionPane.INFORMATION_MESSAGE);
    } catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se pudo guardar el proyecto",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }
}

private void abrirProyectoActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    try{
        boolean result = this.openProject();
        if(result==true){
            JOptionPane.showMessageDialog(this,"El proyecto se ha importado",
            "Information Message",JOptionPane.INFORMATION_MESSAGE);
        }
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se puede abrir el proyecto",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    } 
}
private void tiposDeTestsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                     
// TODO add your handling code here:
    helpDialog = new HelpJDialog(this,false);
    helpDialog.setVisible(true);
}

private void guardarProyectoComoActionPerformed(java.awt.event.ActionEvent evt) {                                                    
// TODO add your handling code here:
    saveTest = new SaveTest();
    try {
        boolean result = saveTest.saveProjectAs();
        if(result==true){
            JOptionPane.showMessageDialog(this,"El proyecto ha sido guardado",
            "Information Message",JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se pudo guardar el proyecto",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }
}
    
private void verTestSimpleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                      
// TODO add your handling code here:
    boolean res = this.verTests();
    if(res==false){
        JOptionPane.showMessageDialog(this,"No tiene ning煤n test abierto",                                                  
        "Warning Message",JOptionPane.WARNING_MESSAGE);
    }
}

private void explorarTestSparqlActionPerformed(java.awt.event.ActionEvent evt) {                                                   
// TODO add your handling code here:
    try{
        this.explorarTests();
    }catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(this,"No se pudo abrir el archivo",                                                  
        "Error Message",JOptionPane.ERROR_MESSAGE);
    }catch(ClassCastException ce){
        JOptionPane.showMessageDialog(this,"El archivo no es compatible con la accion que " +
        "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
    }
}

private void verTestSparqlActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    boolean res = this.verTests();
    if(res==false){
        JOptionPane.showMessageDialog(this,"No tiene ning煤n test abierto",                                                  
        "Warning Message",JOptionPane.WARNING_MESSAGE);
    }
}

private void verInstanciasActionPerformed(java.awt.event.ActionEvent evt) {                                              
// TODO add your handling code here:
    boolean res = this.verInstancias();
    if(res==false){
        JOptionPane.showMessageDialog(this,"No tiene ning煤n test abierto",                                                  
        "Warning Message",JOptionPane.WARNING_MESSAGE);
    }
}
                                                                                   
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainApplication app = new MainApplication();
                app.setVisible(true);
            }
        });
    }
    
    public static CollectionTest getCollection() {
        return collection;
    }
    
    public static void setCollection(CollectionTest coll) {
        collection = coll;
    }
    
    public javax.swing.JMenu getInstanciasMenu() {
        return instanciasMenu;
    }

    public javax.swing.JMenu getTestsSimplesMenu() {
        return testsSimplesMenu;
    }

    public javax.swing.JMenu getTestsSparqlMenu() {
        return testsSparqlMenu;
    }
    
    public static javax.swing.JPanel getContentTestsJPanel() {
        return contentTestsJPanel;
    }
    
    public static String getProyecto() {
        return proyecto;
    }

    public static void setProyecto(String aProyecto) {
        proyecto = aProyecto;
    }
    
    public javax.swing.JMenu getEjecutarMenu() {
        return ejecutarMenu;
    }
    
    public static String getNombreProyecto() {
        return nombreProyecto;
    }

    public static void setNombreProyecto(String aNombreProyecto) {
        nombreProyecto = aNombreProyecto;
    }
    
    public void inicializarContadores(){
        CreateInstancesJPanel.setContadorClas(0);
        CreateInstancesJPanel.setContadorProp(0);
        TestInstancesQueryJPanel.setContadorReal(0);
        TestInstancesTFJPanel.setContadorInstSat(0);
        TestInstancesTextAreaJPanel.setContadorRetClas(0);
    }
    
    public boolean importarTest() throws FileNotFoundException,ClassCastException{
        filechooser = new JFileChooser(MainApplication.getProyecto());
        saveTest = new SaveTest();
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
                decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
                ScenarioTest s = (ScenarioTest) decoder.readObject();
                if(saveTest.saveTestLocally(s)){
                   return true;
                }
            }
        return false;
    }
    
    public void explorarTests() throws FileNotFoundException,ClassCastException{
        frame = new JFrame();
        filechooser = new JFileChooser(MainApplication.getProyecto());
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());                                                  
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
            decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
            ScenarioTest s = (ScenarioTest) decoder.readObject();
            seeTest = new SeeTestJDialog(frame, false, s);
            seeTest.setVisible(true);
        }
    }
    
    public void explorarInstancias() throws FileNotFoundException,ClassCastException{
        filechooser = new JFileChooser(MainApplication.getProyecto());                                               
        frame = new JFrame();
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
            decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
            Instancias inst = (Instancias) decoder.readObject();
            seeTest = new SeeTestJDialog(frame, false, inst);
            seeTest.setVisible(true);
        }
    }
    
    public boolean verTests(){
        frame = new JFrame();
        int sel = ControladorTests.testSeleccionado();
        if(sel!=10){
            seeTest = new SeeTestJDialog(frame, false, scenario);
            seeTest.setVisible(true);
            return true;
        }else{
            return false;
        }
    }
    
    public boolean verInstancias(){
        frame = new JFrame();
        int sel = ControladorTests.testSeleccionado();
        if(sel!=10){
            seeTest = new SeeTestJDialog(frame, false, instancias);
            seeTest.setVisible(true);
            return true;
        }else{
            return false;
        }
    }
    
    public boolean openProject() throws FileNotFoundException,ClassCastException{
        filechooser = new JFileChooser();
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
            decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
            collection = (CollectionTest) decoder.readObject();
            MainApplication.setCollection(collection);
            return true;
        }else{
            return false;
        }
    }
    
    public boolean importarInstancias(ScenarioTest s) throws FileNotFoundException,ClassCastException{
        filechooser = new JFileChooser(MainApplication.getProyecto());
        saveTest = new SaveTest();
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
            decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
            instancias = (Instancias) decoder.readObject();
            s.setInstancias(instancias);
            saveTest.replaceTestLocally(s);
            return true;
        }else return false;   
    }
    
    public boolean editarInstanciasAsociadasTest(){
        frame = new JFrame();
        int sel = ControladorTests.testSeleccionado();
        if(instancias.getPropertyInstances().size()==0 &&  instancias.getClassInstances().size()==0){
            return false;
        }else{
            addInst = new AddInstancesClasPropJDialog(frame,true,instancias,sel);
            addInst.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
            addInst.setVisible(true);
            return true;
        }
    }
    
    public void editarTests() throws FileNotFoundException,ClassCastException{
        ControladorTests.inicializarGuardados();
        ControladorTests.inicializarSeleccionados();
        filechooser = new JFileChooser(MainApplication.getProyecto());
        int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = filechooser.getSelectedFile();
            String nameFile = selectedFile.getPath();
            decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
            ScenarioTest s = (ScenarioTest) decoder.readObject();
            String tipoTest = s.getTestName();
            this.editarTest(s, tipoTest);

        }   
    }

    public void editarInstancias(){
        frame = new JFrame();
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            filechooser = new JFileChooser(MainApplication.getProyecto());
            int option = filechooser.showOpenDialog(MainApplication.getContentTestsJPanel());
            if (option == JFileChooser.APPROVE_OPTION) {
                File selectedFile = filechooser.getSelectedFile();
                String nameFile = selectedFile.getPath();
                try {
                    decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(nameFile)));
                    Instancias inst = (Instancias) decoder.readObject();
                    addInst = new AddInstancesClasPropJDialog(frame, true, inst);
                    addInst.setVisible(true);
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"No se pudo abrir el archivo",                                                  
                    "Error Message",JOptionPane.ERROR_MESSAGE);
                } catch(ClassCastException ce){
                    JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"El archivo no es compatible con la accion que " +
                    "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
                } 
            }   
        }else{
            boolean edit = this.editarInstanciasAsociadasTest();
            if(edit==false){
                JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"Este test no tiene instancias asociadas",
                "Information Message",JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    public void importarInstancias(){
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"No hay ningun test abierto al que " +
                    "importar las instancias","Warning Message",JOptionPane.INFORMATION_MESSAGE);
        }else{
            int sel = ControladorTests.testSeleccionado();
            try{
                if(this.importarInstancias(scenario)){
                    JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"Las instancias se ha importado correctamente",
                    "Information Message",JOptionPane.INFORMATION_MESSAGE);
                }
            }catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"No se ha importado el test",                                                  
                "Error Message",JOptionPane.ERROR_MESSAGE);
            }catch(ClassCastException ce){
                JOptionPane.showMessageDialog(MainApplication.getContentTestsJPanel(),"El archivo no es compatible con la accion que " +
                "desea realizar","Error Message",JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    public void aniadirTestsInst(){ 
        listTest = new ListAndTestsJPanel(new TestSimpleInstSat(0, new ScenarioTest()));
        panelTest.getTestsPanel().remove(0);
        panelTest.getTestsPanel().add(listTest);
        MainApplication.getContentTestsJPanel().getParent().validate();
    }
    
    public void aniadirTestsSat(){ 
    int cont = MainApplication.getContentTestsJPanel().getComponentCount();
    if(cont==0){
        MainApplication.getContentTestsJPanel().add(new TestSimpleInstSat(3),BorderLayout.NORTH);
    }else{
        MainApplication.getContentTestsJPanel().remove(0);
        MainApplication.getContentTestsJPanel().add(new TestSimpleInstSat(3),BorderLayout.NORTH);
    }
    MainApplication.getContentTestsJPanel().getParent().validate();
}

    public void aniadirTestsRet(){ 
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            MainApplication.getContentTestsJPanel().add(new TestSimpleRetClas(1),BorderLayout.CENTER);
        }else{
            MainApplication.getContentTestsJPanel().remove(0);
            MainApplication.getContentTestsJPanel().add(new TestSimpleRetClas(1),BorderLayout.CENTER);
        }
        MainApplication.getContentTestsJPanel().getParent().validate();
    }

    public void aniadirTestsClas(){ 
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            MainApplication.getContentTestsJPanel().add(new TestSimpleRetClas(4),BorderLayout.NORTH);
        }else{
            MainApplication.getContentTestsJPanel().remove(0);
            MainApplication.getContentTestsJPanel().add(new TestSimpleRetClas(4),BorderLayout.NORTH);
        }
        MainApplication.getContentTestsJPanel().getParent().validate();
    }

    public void aniadirTestsSparql(){ 
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            MainApplication.getContentTestsJPanel().add(new AddSPARQLJPanel(5),BorderLayout.NORTH);
        }else{
            MainApplication.getContentTestsJPanel().remove(0);
            MainApplication.getContentTestsJPanel().add(new AddSPARQLJPanel(5),BorderLayout.NORTH);
        }
        MainApplication.getContentTestsJPanel().getParent().validate();
    }

    public void aniadirTestsReal(){ 
        int cont = MainApplication.getContentTestsJPanel().getComponentCount();
        if(cont==0){
            MainApplication.getContentTestsJPanel().add(new TestSimpleReal(2),BorderLayout.NORTH);
        }else{
            MainApplication.getContentTestsJPanel().remove(0);
            MainApplication.getContentTestsJPanel().add(new TestSimpleReal(2),BorderLayout.NORTH);
        }
        MainApplication.getContentTestsJPanel().getParent().validate();
    }
    
    public void editarTest(ScenarioTest s, String tipoTest){
        //ArrayList<Tests> typeTest = Tests.newTests();
        if(tipoTest.equals("Instanciacion")){
            ControladorTests.setTestInstGuardado(false);
            ControladorTests.setTestInstSelect(true);
            TestSimpleInstSat testInst = new TestSimpleInstSat(0, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }
        }else if(tipoTest.equals("Retrieval")){
            ControladorTests.setTestRetGuardado(false);
            ControladorTests.setTestRetSelect(true);
            TestSimpleRetClas testInst = new TestSimpleRetClas(1, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }
        }else if(tipoTest.equals("Realizacion")){
            ControladorTests.setTestRealGuardado(false);
            ControladorTests.setTestRealSelect(true);
            TestSimpleReal testInst = new TestSimpleReal(2, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }
        }else if(tipoTest.equals("Satisfactibilidad")){
            ControladorTests.setTestSatGuardado(false);
            ControladorTests.setTestSatSelect(true);
            TestSimpleInstSat testInst = new TestSimpleInstSat(3, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }
        }else if(tipoTest.equals("Clasificacion")){
            ControladorTests.setTestClasGuardado(false);
            ControladorTests.setTestClasSelect(true);
            TestSimpleRetClas testInst = new TestSimpleRetClas(4, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testInst,BorderLayout.NORTH);
            }
        }else if(tipoTest.equals("sparql")){
            ControladorTests.setTestSparqlGuardado(false);
            ControladorTests.setTestSparqlSelect(true);
            testSparql = new AddSPARQLJPanel(5, s);
            int cont = MainApplication.getContentTestsJPanel().getComponentCount();
            if(cont==0){
                MainApplication.getContentTestsJPanel().add(testSparql,BorderLayout.NORTH);
            }else{
                MainApplication.getContentTestsJPanel().remove(0);
                MainApplication.getContentTestsJPanel().add(testSparql,BorderLayout.NORTH);
            }
        }
        MainApplication.getContentTestsJPanel().setVisible(true);
        MainApplication.getContentTestsJPanel().getParent().validate();
    }

    
    // Variables declaration - do not modify
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem abrirProyecto;
    private static javax.swing.JPanel contentTestsJPanel;
    private javax.swing.JMenuItem editarInstancias;
    private javax.swing.JMenuItem editarTestSimple;
    private javax.swing.JMenuItem editarTestSparql;
    private javax.swing.JMenuItem ejectuarTests;
    private javax.swing.JMenu ejecutarMenu;
    private javax.swing.JMenuItem explorarInstancias;
    private javax.swing.JMenuItem explorarTestSimple;
    private javax.swing.JMenuItem explorarTestSparql;
    private javax.swing.JMenuItem guardarProyecto;
    private javax.swing.JMenuItem guardarProyectoComo;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importarInstancias;
    private javax.swing.JMenuItem importarTestSimple;
    private javax.swing.JMenuItem importarTestSparql;
    private javax.swing.JMenu instanciasMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem nuevoInstancias;
    private javax.swing.JMenuItem nuevoProyecto;
    private javax.swing.JMenuItem nuevoTestCla;
    private javax.swing.JMenuItem nuevoTestInst;
    private javax.swing.JMenuItem nuevoTestReal;
    private javax.swing.JMenuItem nuevoTestRec;
    private javax.swing.JMenuItem nuevoTestSat;
    private javax.swing.JMenu nuevoTestSimple;
    private javax.swing.JMenuItem nuevoTestSparql;
    private javax.swing.JMenu proyectoMenu;
    private javax.swing.JMenuItem salirProyecto;
    private javax.swing.JMenu testsSimplesMenu;
    private javax.swing.JMenu testsSparqlMenu;
    private javax.swing.JMenuItem tiposDeTestsMenuItem;
    private javax.swing.JMenuItem verInstancias;
    private javax.swing.JMenuItem verTestSimpleMenuItem;
    private javax.swing.JMenuItem verTestSparql;
    // End of variables declaration                   

}
