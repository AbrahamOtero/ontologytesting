/*
 * MainApplicationJFrame.java
 *
 * Created on 11 de octubre de 2008, 12:33
 */

package code.google.com.p.ontologytesting.gui;

import code.google.com.p.ontologytesting.gui.auxiliarpanels.*;
import code.google.com.p.ontologytesting.gui.menupanels.*;
import code.google.com.p.ontologytesting.gui.instances.*;
import code.google.com.p.ontologytesting.gui.auxiliarclasess.*;
import code.google.com.p.ontologytesting.gui.tests.*;
import code.google.com.p.ontologytesting.model.*;
import code.google.com.p.ontologytesting.model.ScenarioTest.TipoTest;
import code.google.com.p.ontologytesting.model.reasonerinterfaz.InvalidOntologyException;
import code.google.com.p.ontologytesting.persistence.*;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.Locale;
import java.util.NoSuchElementException;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/**
 *
 * @author  saruskas
 */
public class MainApplicationJFrame extends javax.swing.JFrame{
    
    private ListAndResultsJPanel panelTest;
    private ControladorTests controlador;
    private ScenarioTest s = new ScenarioTest();
    private String carpetaProyecto,nombreProyecto;
    private IOManagerImplementation persist = new IOManagerImplementation();
    private static MainApplicationJFrame mainApp = null;
    private boolean proyectoGuardado=false,existeProyecto=false;
    private static boolean esNuevo=false;
    private AniadirPanelDeAviso panelAviso;
    private FileChooserSelector utils = new FileChooserSelector();
    private CollectionTest collection;
    private TestSimpleInstSat testInstSat;
    private TestSimpleReal testReal;
    private TestSimpleRetClas testRetClas;
    private AddSPARQLJPanel testSparql;
    private JPanel panelActual;
    private ProgressControlJDialog progres;
    private ExecuteTest execTest;
    private JRadioButton esMenuItem,gbMenuItem,usMenuItem;
    private javax.swing.JMenu ontologyMenu;
    
    
    /** Creates new form MainApplicationJFrame */
    private MainApplicationJFrame() {
        initComponents();
        panelAviso = new AniadirPanelDeAviso();
        if(Configuration.getInstance().obtenerIdioma().endsWith("Spanish")){
            esMenuItem.setSelected(true);
        }else if(Configuration.getInstance().obtenerIdioma().endsWith("EnglishGB")){
            gbMenuItem.setSelected(true);
        }else if(Configuration.getInstance().obtenerIdioma().endsWith("EnglishUS")){
            usMenuItem.setSelected(true);
        }
        this.setTitle(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("EVALUADOR_DE_ONTOLOGIAS"));
        this.setSize(new Dimension(910,750));
        controlador = ControladorTests.getInstance();
        panelTest = ListAndResultsJPanel.getInstance();
        contentTestsJPanel.setLayout(new BorderLayout());
        contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
        existeProyecto=false;
    }
 
    private synchronized static void createListAndTestPanel() {
        if (mainApp == null) { 
            mainApp = new MainApplicationJFrame();
        }
    }
 
    public static MainApplicationJFrame getInstance() {
        if (mainApp == null) createListAndTestPanel();
        return mainApp;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        contentTestsJPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        nuevoProyectoMenuItem = new javax.swing.JMenuItem();
        abrirProyectoMenuItem = new javax.swing.JMenuItem();
        guardarProyectoMenuItem = new javax.swing.JMenuItem();
        guardarProyectoComoMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1.setEnabled(false);
        jMenuItem2.setEnabled(false);
        salirMenuItem = new javax.swing.JMenuItem();
        testsMenu = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        nuevoTestInstMenuItem = new javax.swing.JMenuItem();
        nuevoTestRecMenuItem = new javax.swing.JMenuItem();
        nuevoTestRealMenuItem = new javax.swing.JMenuItem();
        nuevoTestSatMenuItem = new javax.swing.JMenuItem();
        nuevoTestClasMenuItem = new javax.swing.JMenuItem();
        nuevoTestSparqlMenuItem = new javax.swing.JMenuItem();
        importarTestsMenuItem = new javax.swing.JMenuItem();
        editarTestsMenuItem = new javax.swing.JMenuItem();
        verTestsMenuItem = new javax.swing.JMenuItem();
        instanciasMenu = new javax.swing.JMenu();
        nuevoInstanciasMenuItem = new javax.swing.JMenuItem();
        importarInstanciasMenuItem = new javax.swing.JMenuItem();
        editarInstanciasMenuItem = new javax.swing.JMenuItem();
        verInstanciasMenuItem = new javax.swing.JMenuItem();
        ejecutarMenu = new javax.swing.JMenu();
        selecTestMenuItem = new javax.swing.JMenuItem();
        ejecutarTodosMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        esMenuItem = new JRadioButton();
        gbMenuItem = new JRadioButton();
        usMenuItem = new JRadioButton();
        helpMenu = new javax.swing.JMenu();
        ontologyMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem ontologyMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        ButtonGroup group = new ButtonGroup();
        group.add(esMenuItem);
        group.add(gbMenuItem);
        group.add(usMenuItem);
        esMenuItem.setSelected(true);
        esMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esMenuItemActionPerformed(evt);
            }
        });
        gbMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gbMenuItemActionPerformed(evt);
            }
        });
        usMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usMenuItemActionPerformed(evt);
            }
        });
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout contentTestsJPanelLayout = new javax.swing.GroupLayout(contentTestsJPanel);
        contentTestsJPanel.setLayout(contentTestsJPanelLayout);
        contentTestsJPanelLayout.setHorizontalGroup(
            contentTestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
        );
        contentTestsJPanelLayout.setVerticalGroup(
            contentTestsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );

        fileMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Proyecto")); // NOI18N

        nuevoProyectoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-new.png"))); // NOI18N
        nuevoProyectoMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo")); // NOI18N
        nuevoProyectoMenuItem.setMnemonic('N');
        nuevoProyectoMenuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_N,InputEvent.CTRL_MASK ));
        nuevoProyectoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoProyectoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(nuevoProyectoMenuItem);

        abrirProyectoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-open.png"))); // NOI18N
        abrirProyectoMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Abrir")); // NOI18N
        abrirProyectoMenuItem.setMnemonic('O');
        abrirProyectoMenuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_O,InputEvent.CTRL_MASK ));
        abrirProyectoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirProyectoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(abrirProyectoMenuItem);

        guardarProyectoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-save.png"))); // NOI18N
        guardarProyectoMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Guardar")); // NOI18N
        guardarProyectoMenuItem.setEnabled(false);
        guardarProyectoMenuItem.setMnemonic('S');
        guardarProyectoMenuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_S,InputEvent.CTRL_MASK ));
        guardarProyectoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarProyectoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(guardarProyectoMenuItem);

        guardarProyectoComoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-save-as.png"))); // NOI18N
        guardarProyectoComoMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Guardar_Como")); // NOI18N
        guardarProyectoComoMenuItem.setEnabled(false);
        guardarProyectoComoMenuItem.setMnemonic('A');
        guardarProyectoComoMenuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_A,InputEvent.CTRL_MASK ));
        guardarProyectoComoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarProyectoComoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(guardarProyectoComoMenuItem);

        jMenuItem2.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Eliminar")); // NOI18N
        fileMenu.add(jMenuItem2);
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/page_delete.gif")));
        jMenuItem2.setMnemonic('D');
        jMenuItem2.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_DELETE,InputEvent.CTRL_MASK ));
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarProyectoActionPerformed(evt);
            }
        });
        jMenuItem1.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Cerrar")); // NOI18N
        jMenuItem1.setMnemonic('C');
        jMenuItem1.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_C,InputEvent.CTRL_MASK ));
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarProyectoActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);
        salirMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Salir")); // NOI18N
        salirMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/system-log-out.png")));
        salirMenuItem.setEnabled(true);
        salirMenuItem.setMnemonic('Q');
        salirMenuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_Q,InputEvent.CTRL_MASK ));
        salirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(salirMenuItem);

        menuBar.add(fileMenu);

        testsMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Tests")); // NOI18N
        testsMenu.setEnabled(false);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-new.png"))); // NOI18N
        jMenu3.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo")); // NOI18N

        jMenu4.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_Simple")); // NOI18N
        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestInstMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestInstMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_de_Instanciación"));
        nuevoTestInstMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestInstMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(nuevoTestInstMenuItem);

        nuevoTestRecMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestRecMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_de_Recuperación"));
        nuevoTestRecMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestRecMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(nuevoTestRecMenuItem);

        nuevoTestRealMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestRealMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_de_Realización"));
        nuevoTestRealMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestRealMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(nuevoTestRealMenuItem);

        nuevoTestSatMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestSatMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_de_Satisfactibilidad")); // NOI18N
        nuevoTestSatMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestSatMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(nuevoTestSatMenuItem);

        nuevoTestClasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/unpin.gif"))); // NOI18N
        nuevoTestClasMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_de_Clasificación"));
        nuevoTestClasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestClasMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(nuevoTestClasMenuItem);

        jMenu3.add(jMenu4);

        nuevoTestSparqlMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/pin.gif"))); // NOI18N
        nuevoTestSparqlMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Test_Sparql")); // NOI18N
        nuevoTestSparqlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoTestSparqlMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(nuevoTestSparqlMenuItem);

        testsMenu.add(jMenu3);

        importarTestsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/go-jump.png"))); // NOI18N
        importarTestsMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Importar")); // NOI18N
        importarTestsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarTestsMenuItemActionPerformed(evt);
            }
        });
        testsMenu.add(importarTestsMenuItem);

        editarTestsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/page_edit.png"))); // NOI18N
        editarTestsMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Editar")); // NOI18N
        editarTestsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarTestsMenuItemActionPerformed(evt);
            }
        });
        testsMenu.add(editarTestsMenuItem);

        verTestsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-print-preview.png"))); // NOI18N
        verTestsMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ver")); // NOI18N
        verTestsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verTestsMenuItemActionPerformed(evt);
            }
        });
        testsMenu.add(verTestsMenuItem);

        menuBar.add(testsMenu);

        instanciasMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Instancias")); // NOI18N
        instanciasMenu.setEnabled(false);

        nuevoInstanciasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-new.png"))); // NOI18N
        nuevoInstanciasMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo")); // NOI18N
        nuevoInstanciasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoInstanciasMenuItemActionPerformed(evt);
            }
        });
        instanciasMenu.add(nuevoInstanciasMenuItem);

        importarInstanciasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/go-jump.png"))); // NOI18N
        importarInstanciasMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Importar")); // NOI18N
        importarInstanciasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarInstanciasMenuItemActionPerformed(evt);
            }
        });
        instanciasMenu.add(importarInstanciasMenuItem);

        editarInstanciasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/page_edit.png"))); // NOI18N
        editarInstanciasMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Editar")); // NOI18N
        editarInstanciasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarInstanciasMenuItemActionPerformed(evt);
            }
        });
        instanciasMenu.add(editarInstanciasMenuItem);

        verInstanciasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-print-preview.png"))); // NOI18N
        verInstanciasMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ver")); // NOI18N
        verInstanciasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verInstanciasMenuItemActionPerformed(evt);
            }
        });
        instanciasMenu.add(verInstanciasMenuItem);

        menuBar.add(instanciasMenu);

        ejecutarMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ejecutar")); // NOI18N
        ejecutarMenu.setEnabled(false);

        selecTestMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-print-preview.png"))); // NOI18N
        selecTestMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Seleccionar_test")); // NOI18N
        selecTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecTestMenuItemActionPerformed(evt);
            }
        });
        ejecutarMenu.add(selecTestMenuItem);

        ejecutarTodosMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/applications-system.png"))); // NOI18N
        ejecutarTodosMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Todos_los_Tests")); // NOI18N
        ejecutarTodosMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarTodosMenuItemActionPerformed(evt);
            }
        });
        ejecutarMenu.add(ejecutarTodosMenuItem);

        menuBar.add(ejecutarMenu);

        jMenu1.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Idiomas")); // NOI18N

        esMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Español"));
        jMenu1.add(esMenuItem);

        gbMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ingles_(GB)")); // NOI18N
        jMenu1.add(gbMenuItem);

        usMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ingles_(US)")); // NOI18N
        jMenu1.add(usMenuItem);

        ontologyMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ontología")); // NOI18N
        ontologyMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ver")); // NOI18N
        ontologyMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/google/com/p/ontologytesting/images/document-print-preview.png"))); // NOI18N
        menuBar.add(ontologyMenu);
        menuBar.add(jMenu1);
        
        helpMenu.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Ayuda")); // NOI18N
        contentsMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Contenidos")); // NOI18N
        ontologyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ontologyMenuItemActionPerformed(evt);
            }
        });
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        ontologyMenu.add(ontologyMenuItem);
        ontologyMenu.setEnabled(false);
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText(java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Acerca_de")); // NOI18N
        helpMenu.add(aboutMenuItem);
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
        @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentTestsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentTestsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }

    private void guardarProyectoComoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarProyectoComoMenuItemActionPerformed
    if(CollectionTest.getInstance().esVacio()==false){
        boolean res = utils.fileChooser(false, true, false,false);
        if(res == true){
            this.guardarProyecto(true, FileChooserSelector.getPathSelected(),esNuevo);
        }   
    }else{
        panelAviso.warningAction("No tiene ningún proyecto para guardar", MainApplicationJFrame.getInstance());
    }
}//GEN-LAST:event_guardarProyectoComoMenuItemActionPerformed

private void ontologyMenuItemActionPerformed(ActionEvent evt) {
    SwingWorkerOntology ontoSW = new SwingWorkerOntology();
    progres = new ProgressControlJDialog(ontoSW);
    JProgressBar progresBar = progres.getProgressBar();
    ontoSW.addPropertyChangeListener(new ProgressListener(progresBar,progres,false));
    progresBar.setIndeterminate(true);
    ontoSW.execute();
    progres.setVisible(true); 
}
    
private void nuevoProyectoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                      
// TODO add your handling code here:
    int aux=0;
    if(existeProyecto==true && CollectionTest.getInstance().esVacio()==false){
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Guardar el proyecto actual?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION) {
            this.guardarProyecto(false, null,esNuevo);
            aux=1;
        }else if(n == JOptionPane.NO_OPTION){
            aux=1;
        }else {
            aux=2;
        }
        if(aux==1){
            ListarTestsJPanel.getInstance().eliminarDatosGuardados();
            ListAndTestsJPanel.getInstance().eliminarTests();
            CollectionTest.getInstance().destroy();
            contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
            deshabilitarBotones(false);
            this.validate();
        }
    }
    if(aux!=2){
        esNuevo=true;
        NewProjectJDialog newProject = new NewProjectJDialog(this,true);
        newProject.setLocationRelativeTo(this);
        newProject.setVisible(true);
        if(newProject.getProyectoCreado()==true){
            this.inicializarContadores();
            deshabilitarBotones(true);
            if(existeProyecto==false){
                contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
                existeProyecto=true;
                this.validate();
            }
        }
    }
}

public void deshabilitarBotones(boolean estado){
    guardarProyectoComoMenuItem.setEnabled(estado);
    guardarProyectoMenuItem.setEnabled(estado);
    instanciasMenu.setEnabled(estado);
    testsMenu.setEnabled(estado);
    ejecutarMenu.setEnabled(estado);
    jMenuItem1.setEnabled(estado);
    jMenuItem2.setEnabled(estado);
    ontologyMenu.setEnabled(estado);
}

private void salirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuItemActionPerformed
// TODO add your handling code here:
    if(existeProyecto==false){
        this.dispose();
        System.exit(0);
    }else{
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Guardar el proyecto actual?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION){
            this.guardarProyecto(false, null,esNuevo);
            this.dispose();
            System.exit(0);
        }else if(n == JOptionPane.NO_OPTION){
            this.dispose();
            System.exit(0);
        }
    }
}//GEN-LAST:event_salirMenuItemActionPerformed

private void esMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    boolean res = Configuration.getInstance().cambiarIdioma("code.google.com.p.ontologytesting.gui.internacionalization.Spanish","es");
    if(res==true){
        panelAviso.confirmAction("Idioma cambiado con esto. Debe reiniciar la aplicación para que los " +
                "cambios tengan efecto", this);
    }else{
        panelAviso.errorAction("No se pudo cambiar el idioma", this);
    }
}

private void gbMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    boolean res = Configuration.getInstance().cambiarIdioma("code.google.com.p.ontologytesting.gui.internacionalization.EnglishGB","uk");
    if(res==true){
        panelAviso.confirmAction("Idioma cambiado con esto. Debe reiniciar la aplicación para que los " +
                "cambios tengan efecto", this);
    }else{
        panelAviso.errorAction("No se pudo cambiar el idioma", this);
    }
}

private void usMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    boolean res = Configuration.getInstance().cambiarIdioma("code.google.com.p.ontologytesting.gui.internacionalization.EnglishUS","us");
    if(res==true){
        panelAviso.confirmAction("Idioma cambiado con esto. Debe reiniciar la aplicación para que los " +
                "cambios tengan efecto", this);
    }else{
        panelAviso.errorAction("No se pudo cambiar el idioma", this);
    }
}

private void eliminarProyectoActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    BorrarProyectoJDialog borrarProy = new BorrarProyectoJDialog(MainApplicationJFrame.getInstance(), true);
    borrarProy.setVisible(true);
    if(borrarProy.isProyectoBorrado()==true){
        ListarTestsJPanel.getInstance().eliminarDatosGuardados();
        ListAndTestsJPanel.getInstance().eliminarTests();
        CollectionTest.getInstance().destroy();
        contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
        deshabilitarBotones(false);
        this.validate();
        existeProyecto=false;
    }
}

private void cerrarProyectoActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    int aux=0;
    if(existeProyecto==true && CollectionTest.getInstance().esVacio()==false){
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Guardar el proyecto actual?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION) {
            this.guardarProyecto(false, null,esNuevo);
            aux=1;
        }else if(n == JOptionPane.NO_OPTION){
            aux=1;
        }else{
            aux=2;
        }
        if(aux==1){
            ListarTestsJPanel.getInstance().eliminarDatosGuardados();
            ListAndTestsJPanel.getInstance().eliminarTests();
            CollectionTest.getInstance().destroy();
            contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
            deshabilitarBotones(false);
            this.validate();
        }
    }
}

private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    AboutJDialog about = new AboutJDialog(this, true);
    about.setLocationRelativeTo(this);
    about.setVisible(true);
}

private void nuevoTestInstMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestInstMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.INST);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestInstMenuItemActionPerformed

private void nuevoTestRecMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestRecMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.RET);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestRecMenuItemActionPerformed


private void nuevoTestRealMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestRealMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.REAL);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestRealMenuItemActionPerformed

private void nuevoTestSatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestSatMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.SAT);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestSatMenuItemActionPerformed


private void nuevoTestClasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestClasMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.CLAS);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestClasMenuItemActionPerformed

private void nuevoTestSparqlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoTestSparqlMenuItemActionPerformed
// TODO add your handling code here:
    s = new ScenarioTest(TipoTest.SPARQL);
    aniadirNuevoTest(s);
}//GEN-LAST:event_nuevoTestSparqlMenuItemActionPerformed

private void importarTestsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarTestsMenuItemActionPerformed
// TODO add your handling code here:
    this.importarTestsInstancias(true);
}//GEN-LAST:event_importarTestsMenuItemActionPerformed

private void editarTestsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarTestsMenuItemActionPerformed
// TODO add your handling code here:
    boolean res = listaTestsInstanciasVacia(true); 
    if(res==true){
        this.editarVerTestsInstancias(true);
    }
}//GEN-LAST:event_editarTestsMenuItemActionPerformed

private void verTestsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verTestsMenuItemActionPerformed
// TODO add your handling code here:
    boolean res = listaTestsInstanciasVacia(true); 
    if(res==true){
        this.editarVerTestsInstancias(true);
    }
}//GEN-LAST:event_verTestsMenuItemActionPerformed

private void nuevoInstanciasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoInstanciasMenuItemActionPerformed
// TODO add your handling code here:
    Instancias inst = new Instancias();
    cargarInstancia(inst,java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nueva_Instancia"));
}//GEN-LAST:event_nuevoInstanciasMenuItemActionPerformed

private void importarInstanciasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarInstanciasMenuItemActionPerformed
// TODO add your handling code here:
    this.importarTestsInstancias(false);
}//GEN-LAST:event_importarInstanciasMenuItemActionPerformed

private void editarInstanciasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarInstanciasMenuItemActionPerformed
// TODO add your handling code here:
    boolean res = listaTestsInstanciasVacia(false); 
    if(res==true){
        this.editarVerTestsInstancias(false);
    }
}//GEN-LAST:event_editarInstanciasMenuItemActionPerformed

private void verInstanciasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verInstanciasMenuItemActionPerformed
// TODO add your handling code here:
    boolean res = listaTestsInstanciasVacia(false); 
    if(res==true){
        this.editarVerTestsInstancias(false);
    }
}//GEN-LAST:event_verInstanciasMenuItemActionPerformed

private void ejecutarTodosMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarTodosMenuItemActionPerformed
// TODO add your handling code here:
    if(CollectionTest.getInstance().getScenariotest().size()>0){
        try{
            TreeResults.setTestSeleccionado("Todos los Tests");
            execTest = new ExecuteTest(CollectionTest.getInstance().getScenariotest());  
            progres = new ProgressControlJDialog(execTest);
            JProgressBar progresBar = progres.getProgressBar();
            progresBar.setValue(0);
            execTest.addPropertyChangeListener(new ProgressListener(progresBar,progres,true));
            execTest.execute();
            progres.setVisible(true);         
        }catch(InvalidOntologyException ex){
            panelAviso.errorAction("Error ejecutando los tests",this);  
        }
    }else{
        panelAviso.errorAction("Su lista de tests está vacía",this);  
    }
}//GEN-LAST:event_ejecutarTodosMenuItemActionPerformed

private void guardarProyectoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarProyectoMenuItemActionPerformed
// TODO add your handling code here:
    if(CollectionTest.getInstance().esVacio()==false){
        this.guardarProyecto(false, null,esNuevo);
    }else{
        panelAviso.warningAction("No tiene ningún proyecto para guardar", MainApplicationJFrame.getInstance());
    }
}//GEN-LAST:event_guardarProyectoMenuItemActionPerformed

private void abrirProyectoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirProyectoMenuItemActionPerformed
// TODO add your handling code here: 
    int aux=0;
    if(existeProyecto==true && CollectionTest.getInstance().esVacio()==false){
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Guardar el proyecto actual?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION) {
            this.guardarProyecto(false, null,esNuevo);
            aux=1;
        }else if(n == JOptionPane.NO_OPTION){
            aux=1;
        }else{
            aux=2;
        }
        if(aux==1){
            ListarTestsJPanel.getInstance().eliminarDatosGuardados();
            ListAndTestsJPanel.getInstance().eliminarTests();
            CollectionTest.getInstance().destroy();
            contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
            deshabilitarBotones(false);
            this.validate();
        }
    }
    if(aux!=2){
        AbrirProyectoJDialog abrirP = new AbrirProyectoJDialog(MainApplicationJFrame.getInstance(), true);
        try {
            boolean res = utils.fileChooser(true, true, false,true);
            if(res == true){
                esNuevo=false;
                this.setCarpetaProyecto(FileChooserSelector.getPathSelected());
                this.setNombreProyecto(utils.getNombreProyecto());
                collection = persist.loadProject();
                persist.prepareProject(collection);
                abrirP.setNamespaceText(CollectionTest.getInstance().getNamespace());
                abrirP.getUbicacionFisicaTextField().setText(CollectionTest.getInstance().getOntology());
                abrirP.setVisible(true);
                if(abrirP.isProyectoCargado()==true){
                    this.inicializarContadores();
                    deshabilitarBotones(true);
                    if(existeProyecto==false){
                        contentTestsJPanel.add(panelTest,BorderLayout.CENTER);
                        ControladorTests.getInstance().inicializarGuardados();
                        ControladorTests.getInstance().inicializarSeleccionados();
                        existeProyecto=true;
                        this.validate();
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            panelAviso.errorAction("No se encontró el archivo especificado", MainApplicationJFrame.getInstance());
        } catch (ClassCastException ex) {
            panelAviso.errorAction("Proyecto no válido", MainApplicationJFrame.getInstance());
        } catch (NoSuchElementException ex) {
            panelAviso.errorAction("Proyecto no válido", MainApplicationJFrame.getInstance());
        }
    }
}//GEN-LAST:event_abrirProyectoMenuItemActionPerformed

private void selecTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecTestMenuItemActionPerformed
// TODO add your handling code here:
    boolean res = listaTestsInstanciasVacia(true); 
    if(res==true){
        ListarTestsInstanciasJPanel listar = new ListarTestsInstanciasJPanel(CollectionTest.getInstance().getScenariotest(),CollectionTest.getInstance().getInstancias(),true);
        EjecutarTestJDialog ejecutarTest = new EjecutarTestJDialog(this,true,listar);
        ejecutarTest.setLocationRelativeTo(this);
        ejecutarTest.setVisible(true);
        ejecutarTest.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    }
}//GEN-LAST:event_selecTestMenuItemActionPerformed

private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
// TODO add your handling code here:
    HelpJDialog help = new HelpJDialog(this,true);
    help.setLocationRelativeTo(this);
    help.setVisible(true);
}//GEN-LAST:event_contentsMenuItemActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
// TODO add your handling code here:
    if(existeProyecto==false){
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Desea salir de la aplicación?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION){
            this.dispose();
            System.exit(0);
        } 
    }else{
        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(MainApplicationJFrame.getInstance(), "¿Guardar el proyecto antes de salir?", 
                "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION){
            ListAndTestsJPanel listAndTests = panelTest.getTestsPanel();
            if(listAndTests.guardarTodosTests()==true){
                this.guardarProyecto(false, null,esNuevo);
                this.dispose();
                System.exit(0);
            }
        }else if(n == JOptionPane.NO_OPTION){
            this.dispose();
            System.exit(0);
        }
    }
}
    
private void guardarProyecto(boolean como, String fichero,boolean esNuevo){
    IOManagerImplementation manager = new IOManagerImplementation(como,this.getCarpetaProyecto(),this.getNombreProyecto(),fichero,esNuevo);
    IOSwingWorker sw = new IOSwingWorker(manager);
    progres = new ProgressControlJDialog(sw);
    JProgressBar progresBar = progres.getProgressBar();
    sw.addPropertyChangeListener(new ProgressListener(progresBar,progres,false));
    progresBar.setIndeterminate(true);
    sw.execute();
    progres.setVisible(true); 
}

public class IOSwingWorker extends SwingWorker<Boolean, Void>{
        
    private IOManagerImplementation iomanager = new IOManagerImplementation();

    private IOSwingWorker(IOManagerImplementation iomanager) {
        this.iomanager=iomanager;
    }

    @Override
    protected Boolean doInBackground() throws Exception {
        boolean res=false;
        res = saveTest(iomanager);
        return res;
    }

    private boolean saveTest(IOManagerImplementation iomanager){ 
        boolean res=false;
        try {
            res = iomanager.saveProject(iomanager.getComo(), iomanager.getCarpetaProy(), iomanager.getNombreProy(), iomanager.getFichero());
            if(res==true){
                Configuration.getInstance().cambiarPath(MainApplicationJFrame.getInstance().getCarpetaProyecto());
            }
        } catch (FileNotFoundException ex) {
        }
        return res;
    }

    @Override
    protected void done() {
        boolean res = false;
        AniadirPanelDeAviso panelAviso = new AniadirPanelDeAviso();
        if(this.isCancelled()==false){
            Toolkit.getDefaultToolkit().beep();
            try {
                res = get();
            } catch (Exception ignore) {
                ignore.printStackTrace();
            }
            if(res==true){
                panelAviso.confirmAction("Proyecto guardado", MainApplicationJFrame.getInstance());
                MainApplicationJFrame.getInstance().setProyectoGuardado(true);
                progres.setVisible(false);
            }else{
                panelAviso.errorAction("Proyecto no guardado",MainApplicationJFrame.getInstance()); 
                progres.setVisible(false);
            }
        }
    }
}

public class SwingWorkerOntology extends SwingWorker<OntologyJDialog, Void>{
    
    OntologyJDialog onto = null;
            
    private SwingWorkerOntology() {
    }

    @Override
    protected OntologyJDialog doInBackground() throws Exception {
        onto = new OntologyJDialog(MainApplicationJFrame.getInstance(),false,this);
        if(this.isCancelled()==false){
            onto.setVisible(true);
        }
        return onto;
    }

    @Override
    protected void done() {
        OntologyJDialog res = null;
        AniadirPanelDeAviso panelAviso = new AniadirPanelDeAviso();
        if(this.isCancelled()==false){
            Toolkit.getDefaultToolkit().beep();
            try {
                res = get();
            } catch (Exception ignore) {
                ignore.printStackTrace();
            }
            if(res!=null){
                progres.setVisible(false);
            }else{
                panelAviso.errorAction("No se pudo mostrar la ontología",MainApplicationJFrame.getInstance()); 
                progres.setVisible(false);
            }
        }
    }

        
    }

public void importarTestsInstancias(boolean impTest){
    ImportarTestsInstJDialog abrirTests = new ImportarTestsInstJDialog(this,true,impTest);
    abrirTests.setLocationRelativeTo(this);
    abrirTests.setVisible(true);
    abrirTests.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
}

public void editarVerTestsInstancias(boolean verEditTest){
    ListarTestsInstanciasJPanel listar = new ListarTestsInstanciasJPanel(CollectionTest.getInstance().getScenariotest(),CollectionTest.getInstance().getInstancias(),verEditTest);
    EditarVerTestInstanciasJDialog editarVerTestInst = new EditarVerTestInstanciasJDialog(this,true,listar,verEditTest);
    editarVerTestInst.setLocationRelativeTo(this);
    editarVerTestInst.setVisible(true);
    editarVerTestInst.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
}

public boolean listaTestsInstanciasVacia(boolean test){
    if(test==true){
        if(CollectionTest.getInstance().getScenariotest().size()==0){
            panelAviso.errorAction("Su lista de tests está vacía",this);  
        }else return true;
    }else{
        if(CollectionTest.getInstance().getInstancias().size()==0){
            panelAviso.errorAction("Su lista de instancias está vacía",this);  
        }else return true;
    }
    return false;
}

public void aniadirNuevoTest(ScenarioTest s){
    this.inicializarContadores();
    int type = 0;
    if(s.getTipoTest().name().equals("INST")){
        type = 0;
    }else if(s.getTipoTest().name().equals("SAT")){
        type = 3;
    }else if(s.getTipoTest().name().equals("RET") ){
        type = 1;
    }else if(s.getTipoTest().name().equals("CLAS")){
        type = 4;
    }else if(s.getTipoTest().name().equals("REAL")){
        type = 2;
    }else if(s.getTipoTest().name().equals("SPARQL")){
        type = 5;
    }
    controlador.prepararTest(s.getTipoTest().name());
    cargarTest(type,s);
}

public void cargarInstancia(Instancias inst, String msg){
    Instancias instancias = new Instancias(inst);
    AddInstancesClasPropJPanel nuevoInst = new AddInstancesClasPropJPanel(instancias);
    panelTest.getTestsPanel().aniadirTest(nuevoInst,msg);
    setPanelActual(nuevoInst);
}

public void cargarInstancia(ScenarioTest scenario, String msg){
    AddInstancesClasPropJPanel nuevoInst = new AddInstancesClasPropJPanel(scenario);
    panelTest.getTestsPanel().aniadirTest(nuevoInst,msg);
    setPanelActual(nuevoInst);
}

public void cargarTest(int type,ScenarioTest s){
    String testName="";
    if(type==0 || type==3){
        testInstSat = new TestSimpleInstSat(s);
        if(s.getNombre().equals("") && type==0){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Instanciacion");
        }else if(s.getNombre().equals("") && type==3){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Satisfactibilidad");
        }else testName=s.getNombre();
        panelTest.getTestsPanel().aniadirTest(testInstSat,testName);
        setPanelActual(testInstSat);
    }else if(type==1 || type==4){
        if(s.getNombre().equals("") && type==1){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Recuperacion");
        }else if(s.getNombre().equals("") && type==4){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Clasificacion");
        }else testName=s.getNombre();
        testRetClas = new TestSimpleRetClas(s);
        panelTest.getTestsPanel().aniadirTest(testRetClas,testName);
        setPanelActual(testRetClas);
    }else if(type==2){
        if(s.getNombre().equals("")){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Realizacion");
        }else testName=s.getNombre();
         testReal = new TestSimpleReal(s);
         panelTest.getTestsPanel().aniadirTest(testReal,testName);
         setPanelActual(testReal);
    }else if(type==5){
        if(s.getNombre().equals("")){
            testName=java.util.ResourceBundle.getBundle(Configuration.getPropiedades().getProperty("IDIOMA"),new Locale(Configuration.getPropiedades().getProperty("LOCALE"))).getString("Nuevo_Sparql");
        }else testName=s.getNombre();
        testSparql = new AddSPARQLJPanel(s);
        panelTest.getTestsPanel().aniadirTest(testSparql,testName);
        setPanelActual(testSparql);
    }
}

public void inicializarContadores(){
    CreateInstancesJPanel.setContadorClas(0);
    CreateInstancesJPanel.setContadorProp(0);
    TestInstancesQueryJPanel.setContadorReal(0);
    TestInstancesTFJPanel.setContadorInstSat(0);
    TestInstancesTextAreaJPanel.setContadorRetClas(0);
}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                /*try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ignore) {
                }*/
                Locale.setDefault(new Locale(Configuration.getPropiedades().getProperty("LOCALE")));
                MainApplicationJFrame main = MainApplicationJFrame.getInstance();
                URL image = MainApplicationJFrame.class.getResource("images/ontology.jpg"); 
                main.setIconImage (new ImageIcon(image).getImage());
                main.setLocationRelativeTo(null);
                main.setVisible(true);
            }
        });
    }
    
    public String getCarpetaProyecto() {
        return carpetaProyecto;
    }

    public void setCarpetaProyecto(String carpetaProyecto) {
        this.carpetaProyecto = carpetaProyecto;
    }

    public String getNombreProyecto() {
        return nombreProyecto;
    }

    public void setNombreProyecto(String nombreProyecto) {
        this.nombreProyecto = nombreProyecto;
    }

    public boolean isProyectoGuardado() {
        return proyectoGuardado;
    }

    public void setProyectoGuardado(boolean proyectoGuardado) {
        this.proyectoGuardado = proyectoGuardado;
    }
    
    public JPanel getPanelActual() {
        return panelActual;
    }

    public void setPanelActual(JPanel panelActual) {
        this.panelActual = panelActual;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem abrirProyectoMenuItem;
    private javax.swing.JPanel contentTestsJPanel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem editarInstanciasMenuItem;
    private javax.swing.JMenuItem editarTestsMenuItem;
    private javax.swing.JMenu ejecutarMenu;
    private javax.swing.JMenuItem ejecutarTodosMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem guardarProyectoComoMenuItem;
    private javax.swing.JMenuItem guardarProyectoMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importarInstanciasMenuItem;
    private javax.swing.JMenuItem importarTestsMenuItem;
    private javax.swing.JMenu instanciasMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem nuevoInstanciasMenuItem;
    private javax.swing.JMenuItem nuevoProyectoMenuItem;
    private javax.swing.JMenuItem nuevoTestClasMenuItem;
    private javax.swing.JMenuItem nuevoTestInstMenuItem;
    private javax.swing.JMenuItem nuevoTestRealMenuItem;
    private javax.swing.JMenuItem nuevoTestRecMenuItem;
    private javax.swing.JMenuItem nuevoTestSatMenuItem;
    private javax.swing.JMenuItem nuevoTestSparqlMenuItem;
    private javax.swing.JMenuItem salirMenuItem;
    private javax.swing.JMenuItem selecTestMenuItem;
    private javax.swing.JMenu testsMenu;
    private javax.swing.JMenuItem verInstanciasMenuItem;
    private javax.swing.JMenuItem verTestsMenuItem;
    // End of variables declaration//GEN-END:variables

}
