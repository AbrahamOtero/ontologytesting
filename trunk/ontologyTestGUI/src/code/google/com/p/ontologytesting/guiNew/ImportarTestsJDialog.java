/*
 * AbrirTestsJDialog.java
 *
 * Created on 14 de julio de 2008, 13:48
 */

package code.google.com.p.ontologytesting.guiNew;

import code.google.com.p.ontologytesting.model.CollectionTest;
import code.google.com.p.ontologytesting.model.Instancias;
import code.google.com.p.ontologytesting.model.ScenarioTest;
import code.google.com.p.ontologytesting.persistence.SaveTest;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.beans.XMLDecoder;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

/**
 *
 * @author  sara.garcia
 */
public class ImportarTestsJDialog extends javax.swing.JDialog {

    private ListarTestInstancias listaFicheros;
    private JFileChooser filechooser;
    private String pathProyect;
    private XMLDecoder decoder;
    private CollectionTest collection;
    private List<ScenarioTest> scenarioSparql = new ArrayList<ScenarioTest>();
    private List<ScenarioTest> scenarioSimple = new ArrayList<ScenarioTest>();
    private List<Instancias> instancias = new ArrayList<Instancias>();
    private ListarTestsJPanel listT;
    private SaveTest saveTest = new SaveTest();
    private OpcionesMenu opMenu = new OpcionesMenu();
    private boolean importarTest=false;
    private SeeTestJDialog verTest = null;
    private JPanel panel = new JPanel();
    
    /** Creates new form AbrirTestsJDialog */
    public ImportarTestsJDialog(Frame parent, boolean modal,final CollectionTest collection,boolean impTest) {
        super(parent, modal);
        initComponents();
        this.setImportarTest(impTest);
        listT = ListarTestsJPanel.getInstance();
        this.setTitle("Importar Tests");
    }

    public void prepararImport(List<ScenarioTest> listaTests){   
        contentPanel.setLayout(new FlowLayout());  
        listaFicheros = new ListarTestInstancias(listaTests,null);
        contentPanel.add(listaFicheros.getSplitPane());
        contentPanel.getParent().validate(); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        abrirButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        pathProyectoTextField = new javax.swing.JTextField();
        examinarButton = new javax.swing.JButton();
        importarButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        abrirButton.setText("Ver Test ");
        abrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Ubicaci√≥n de los Tests");

        jLabel3.setText("Seleccione el proyecto que contiene los tests/instancias con los que desea trabajar:");

        examinarButton.setText("Examinar");
        examinarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examinarButtonActionPerformed(evt);
            }
        });

        importarButton.setText("Importar");
        importarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarButtonActionPerformed(evt);
            }
        });

        editarButton.setText("Editar");
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(contentPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pathProyectoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(examinarButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(abrirButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(importarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelarButton)))
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathProyectoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examinarButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarButton)
                    .addComponent(importarButton)
                    .addComponent(editarButton)
                    .addComponent(abrirButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void abrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirButtonActionPerformed
// TODO add your handling code here:  
    if(this.isImportarTest()==true){
        verTest = opMenu.verTest(listaFicheros.getScenarioSelect());
    }else{
        verTest = opMenu.verInstancias(listaFicheros.getInstanciaSelect());
    }
    verTest.setLocationRelativeTo(this);
    verTest.setVisible(true);
}//GEN-LAST:event_abrirButtonActionPerformed

private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
// TODO add your handling code here:
    this.setVisible(false);
}//GEN-LAST:event_cancelarButtonActionPerformed

private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed
// TODO add your handling code here:
    if(this.isImportarTest()==true){
        opMenu.editarTest(listaFicheros.getScenarioSelect());//GEN-LAST:event_editarButtonActionPerformed
    }else{
        AddInstancesClasPropJDialog editInst = new AddInstancesClasPropJDialog(panel, false, listaFicheros.getInstanciaSelect());
        editInst.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        editInst.setVisible(true);
    }
}

private void examinarButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
// TODO add your handling code here:
    openFile(this.getPathProyectoTextField());
    try{
        decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(this.getPathProyect())));
        collection = (CollectionTest) decoder.readObject();
        this.prepararImport(collection.getScenariotest());
        decoder.close();    
    }catch(FileNotFoundException e){
    }catch(ClassCastException e){
        System.out.println("Este no es un proyecto valido");
    }catch(Exception ex){
        System.out.println("Este no es un proyecto valido");
    }
}

private void importarButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
// TODO add your handling code here:
    if(this.isImportarTest()==true){
        List<ScenarioTest> scenImp = listaFicheros.getListaDeScenarios();
        for(int i=0;i<scenImp.size();i++){
            if(scenImp.get(i).getTipoTest().getTipo()==5){
                scenarioSparql.add(scenImp.get(i));
            }else{
                scenarioSimple.add(scenImp.get(i));
            }
            saveTest.saveTestInMemory(scenImp.get(i));
        }
        if(scenarioSparql.size()>0){
            listT.aniadirTestSparql(scenarioSparql);
        }
        if(scenarioSimple.size()>0)
        {
            listT.aniadirTestSimple(scenarioSimple);
        }    
    }else{
        List<Instancias> instImp = listaFicheros.getListaInstancias();
        for(int i=0;i<instImp.size();i++){
            instancias.add(instImp.get(i));
            saveTest.saveInstanciasInMemory(instImp.get(i));
        }
        listT.aniadirInstancias(instancias);
    }
}

    private void openFile(JTextField textfield){
        String path="";
        filechooser = new JFileChooser("");
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int option = filechooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
          File selectedFile = filechooser.getSelectedFile();
          path = selectedFile.getAbsolutePath();
          textfield.setText(path);
          this.setPathProyect(path);
        }
    }
    
    public javax.swing.JTextField getPathProyectoTextField() {
        return pathProyectoTextField;
    }

    public String getPathProyect() {
        return pathProyect;
    }

    public void setPathProyect(String pathProyect) {
        this.pathProyect = pathProyect;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton examinarButton;
    private javax.swing.JButton importarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField pathProyectoTextField;
    // End of variables declaration//GEN-END:variables

    public boolean isImportarTest() {
        return importarTest;
    }

    public void setImportarTest(boolean importarTest) {
        this.importarTest = importarTest;
    }

}
